// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* LibServicePort.h
   Generated by wsdl2h 1.2.16 from LibServicePort.wsdl and typemap.dat
   2017-06-26 07:46:12 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2001-2010 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Build Notes

NOTE:

 - Run soapcpp2 on LibServicePort.h to generate the SOAP/XML processing logic.
   Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 option -i to generate improved proxy and server classes.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h options -nname and -Nname to globally rename the prefix 'ns'.
 - Use wsdl2h option -d to enable DOM support for xsd:anyType.
 - Use wsdl2h option -g to auto-generate readers and writers for root elements.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

WARNING:

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS.
   USE THE SOURCE CODE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT BUILDS:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

LICENSE:

@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following two licenses:
1) GPL or 2) Genivia's license for commercial use.
--------------------------------------------------------------------------------
1) GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org
--------------------------------------------------------------------------------
2) A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://service.ws.hw.com/                                                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to remove STL dependency)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://service.ws.hw.com/"
ns2 = ""

*/

#define SOAP_NAMESPACE_OF_ns2	""
//gsoap ns2   schema namespace:	
//gsoap ns2   schema form:	unqualified

#define SOAP_NAMESPACE_OF_ns1	"http://service.ws.hw.com/"
//gsoap ns1   schema namespace:	http://service.ws.hw.com/
//gsoap ns1   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/



//  Forward declaration of class ns1__getBook.
class ns1__getBook;

//  Forward declaration of class ns1__getBookResponse.
class ns1__getBookResponse;

//  Forward declaration of class ns1__book.
class ns1__book;

//  Forward declaration of class ns1__NoAuthorityException.
class ns1__NoAuthorityException;

//  Forward declaration of class ns1__SystemException.
class ns1__SystemException;

//  Forward declaration of class ns1__getItems.
class ns1__getItems;

//  Forward declaration of class ns1__getItemsResponse.
class ns1__getItemsResponse;

//  Forward declaration of class ns1__item.
class ns1__item;

//  Forward declaration of class ns1__getRelegateArrivals.
class ns1__getRelegateArrivals;

//  Forward declaration of class ns1__getRelegateArrivalsResponse.
class ns1__getRelegateArrivalsResponse;

//  Forward declaration of class ns1__arrival.
class ns1__arrival;

//  Forward declaration of class ns1__getPregArrivals.
class ns1__getPregArrivals;

//  Forward declaration of class ns1__getPregArrivalsResponse.
class ns1__getPregArrivalsResponse;

//  Forward declaration of class ns1__logout.
class ns1__logout;

//  Forward declaration of class ns1__logoutResponse.
class ns1__logoutResponse;

//  Forward declaration of class ns1__voltFine.
class ns1__voltFine;

//  Forward declaration of class ns1__voltFineResponse.
class ns1__voltFineResponse;

//  Forward declaration of class ns1__exceedFine.
class ns1__exceedFine;

//  Forward declaration of class ns1__exceedFineResponse.
class ns1__exceedFineResponse;

//  Forward declaration of class ns1__getCircs.
class ns1__getCircs;

//  Forward declaration of class ns1__getCircsResponse.
class ns1__getCircsResponse;

//  Forward declaration of class ns1__circ.
class ns1__circ;

//  Forward declaration of class ns1__getReader.
class ns1__getReader;

//  Forward declaration of class ns1__getReaderResponse.
class ns1__getReaderResponse;

//  Forward declaration of class ns1__reader.
class ns1__reader;

//  Forward declaration of class ns1__getDeps.
class ns1__getDeps;

//  Forward declaration of class ns1__getDepsResponse.
class ns1__getDepsResponse;

//  Forward declaration of class ns1__simpleBean.
class ns1__simpleBean;

//  Forward declaration of class ns1__checkReader.
class ns1__checkReader;

//  Forward declaration of class ns1__checkReaderResponse.
class ns1__checkReaderResponse;

//  Forward declaration of class ns1__checkRedrResult.
class ns1__checkRedrResult;

//  Forward declaration of class ns1__getDebts.
class ns1__getDebts;

//  Forward declaration of class ns1__getDebtsResponse.
class ns1__getDebtsResponse;

//  Forward declaration of class ns1__debt.
class ns1__debt;

//  Forward declaration of class ns1__getViolations1.
class ns1__getViolations1;

//  Forward declaration of class ns1__getViolations1Response.
class ns1__getViolations1Response;

//  Forward declaration of class ns1__violation.
class ns1__violation;

//  Forward declaration of class ns1__getRelegates.
class ns1__getRelegates;

//  Forward declaration of class ns1__getRelegatesResponse.
class ns1__getRelegatesResponse;

//  Forward declaration of class ns1__relegate.
class ns1__relegate;

//  Forward declaration of class ns1__pregOrRelegate.
class ns1__pregOrRelegate;

//  Forward declaration of class ns1__getViolations.
class ns1__getViolations;

//  Forward declaration of class ns1__getViolationsResponse.
class ns1__getViolationsResponse;

//  Forward declaration of class ns1__certLoss.
class ns1__certLoss;

//  Forward declaration of class ns1__certLossResponse.
class ns1__certLossResponse;

//  Forward declaration of class ns1__getLendHist.
class ns1__getLendHist;

//  Forward declaration of class ns1__getLendHistResponse.
class ns1__getLendHistResponse;

//  Forward declaration of class ns1__getMarc.
class ns1__getMarc;

//  Forward declaration of class ns1__getMarcResponse.
class ns1__getMarcResponse;

//  Forward declaration of class ns1__marc.
class ns1__marc;

//  Forward declaration of class ns1__getAccounts.
class ns1__getAccounts;

//  Forward declaration of class ns1__getAccountsResponse.
class ns1__getAccountsResponse;

//  Forward declaration of class ns1__account.
class ns1__account;

//  Forward declaration of class ns1__getPregs.
class ns1__getPregs;

//  Forward declaration of class ns1__getPregsResponse.
class ns1__getPregsResponse;

//  Forward declaration of class ns1__preg.
class ns1__preg;

//  Forward declaration of class ns1__registerReader.
class ns1__registerReader;

//  Forward declaration of class ns1__registerReaderResponse.
class ns1__registerReaderResponse;

//  Forward declaration of class ns1__getAccounts1.
class ns1__getAccounts1;

//  Forward declaration of class ns1__getAccounts1Response.
class ns1__getAccounts1Response;

//  Forward declaration of class ns1__getLostPays.
class ns1__getLostPays;

//  Forward declaration of class ns1__getLostPaysResponse.
class ns1__getLostPaysResponse;

//  Forward declaration of class ns1__lostPay.
class ns1__lostPay;

//  Forward declaration of class ns1__exceedFine1.
class ns1__exceedFine1;

//  Forward declaration of class ns1__exceedFine1Response.
class ns1__exceedFine1Response;

//  Forward declaration of class ns1__getRedrTypes.
class ns1__getRedrTypes;

//  Forward declaration of class ns1__getRedrTypesResponse.
class ns1__getRedrTypesResponse;

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://service.ws.hw.com/                                                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://service.ws.hw.com/                                                *
 *                                                                            *
\******************************************************************************/


/// "http://service.ws.hw.com/":getBook is a complexType.
class ns1__getBook
{ public:
/// Element arg0 of type xs:string.
    std::string*                         arg0                           0;	///< Optional element.
/// Element arg1 of type xs:string.
    std::string*                         arg1                           0;	///< Optional element.
/// Element arg2 of type xs:string.
    std::string*                         arg2                           0;	///< Optional element.
/// Element arg3 of type xs:int.
    int                                  arg3                           1;	///< Required element.
/// Element arg4 of type xs:string.
    std::string*                         arg4                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":getBookResponse is a complexType.
class ns1__getBookResponse
{ public:
/// Element return of type "http://service.ws.hw.com/":book.
    ns1__book*                           return_                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":book is a complexType.
class ns1__book
{ public:
/// Element author of type xs:string.
    wchar_t*                         author                         0;	///< Optional element.
/// Element barcode of type xs:string.
    wchar_t*                         barcode                        0;	///< Optional element.
/// Element callNo of type xs:string.
    wchar_t*                         callNo                         0;	///< Optional element.
/// Element locationName of type xs:string.
    wchar_t*                         locationName                   0;	///< Optional element.
/// Element price of type xs:float.
    float                                price                          1;	///< Required element.
/// Element propNo of type xs:string.
    wchar_t*                         propNo                         0;	///< Optional element.
/// Element publisher of type xs:string.
    wchar_t*                         publisher                      0;	///< Optional element.
/// Element state of type xs:string.
    wchar_t*                         state                          0;	///< Optional element.
/// Element stateName of type xs:string.
    wchar_t*                         stateName                      0;	///< Optional element.
/// Element title of type xs:string.
    wchar_t*                         title                          0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":NoAuthorityException is a complexType.
class ns1__NoAuthorityException
{ public:
/// Element message of type xs:string.
    wchar_t*                         message                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":SystemException is a complexType.
class ns1__SystemException
{ public:
/// Element message of type xs:string.
    wchar_t*                         message                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":getItems is a complexType.
class ns1__getItems
{ public:
/// Element arg0 of type xs:string.
    std::string*                         arg0                           0;	///< Optional element.
/// Element arg1 of type xs:string.
    std::string*                         arg1                           0;	///< Optional element.
/// Element arg2 of type xs:string.
    std::string*                         arg2                           0;	///< Optional element.
/// Element arg3 of type xs:string.
    std::string*                         arg3                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":getItemsResponse is a complexType.
class ns1__getItemsResponse
{ public:
/// Vector of ns1__item* with length 0..unbounded
    std::vector<ns1__item*             > return_                        0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":item is a complexType.
class ns1__item
{ public:
/// Element attachment of type xs:string.
    wchar_t*                         attachment                     0;	///< Optional element.
/// Element barCode of type xs:string.
    wchar_t*                         barCode                        0;	///< Optional element.
/// Element callNo of type xs:string.
    wchar_t*                         callNo                         0;	///< Optional element.
/// Element carrierName of type xs:string.
    wchar_t*                         carrierName                    0;	///< Optional element.
/// Element location of type xs:string.
    wchar_t*                         location                       0;	///< Optional element.
/// Element locationDept of type xs:string.
    wchar_t*                         locationDept                   0;	///< Optional element.
/// Element marcRecNo of type xs:string.
    wchar_t*                         marcRecNo                      0;	///< Optional element.
/// Element price of type xs:float.
    float                                price                          1;	///< Required element.
/// Element propNo of type xs:string.
    wchar_t*                         propNo                         0;	///< Optional element.
/// Element state of type xs:string.
    wchar_t*                         state                          0;	///< Optional element.
/// Element volPeri of type xs:string.
    wchar_t*                         volPeri                        0;	///< Optional element.
/// Element year of type xs:string.
    wchar_t*                         year                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":getRelegateArrivals is a complexType.
class ns1__getRelegateArrivals
{ public:
/// Element arg0 of type xs:string.
    std::string*                         arg0                           0;	///< Optional element.
/// Element arg1 of type xs:string.
    std::string*                         arg1                           0;	///< Optional element.
/// Element arg2 of type xs:string.
    std::string*                         arg2                           0;	///< Optional element.
/// Element arg3 of type xs:string.
    std::string*                         arg3                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":getRelegateArrivalsResponse is a complexType.
class ns1__getRelegateArrivalsResponse
{ public:
/// Vector of ns1__arrival* with length 0..unbounded
    std::vector<ns1__arrival*          > return_                        0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":arrival is a complexType.
class ns1__arrival
{ public:
/// Element arrivalDate of type xs:string.
    wchar_t*                         arrivalDate                    0;	///< Optional element.
/// Element author of type xs:string.
    wchar_t*                         author                         0;	///< Optional element.
/// Element barcode of type xs:string.
    wchar_t*                         barcode                        0;	///< Optional element.
/// Element callNo of type xs:string.
    wchar_t*                         callNo                         0;	///< Optional element.
/// Element certId of type xs:string.
    wchar_t*                         certId                         0;	///< Optional element.
/// Element keepEndDate of type xs:string.
    wchar_t*                         keepEndDate                    0;	///< Optional element.
/// Element marcRecNo of type xs:string.
    wchar_t*                         marcRecNo                      0;	///< Optional element.
/// Element name of type xs:string.
    wchar_t*                         name                           0;	///< Optional element.
/// Element propNo of type xs:string.
    wchar_t*                         propNo                         0;	///< Optional element.
/// Element takeLocation of type xs:string.
    wchar_t*                         takeLocation                   0;	///< Optional element.
/// Element title of type xs:string.
    wchar_t*                         title                          0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":getPregArrivals is a complexType.
class ns1__getPregArrivals
{ public:
/// Element arg0 of type xs:string.
    std::string*                         arg0                           0;	///< Optional element.
/// Element arg1 of type xs:string.
    std::string*                         arg1                           0;	///< Optional element.
/// Element arg2 of type xs:string.
    std::string*                         arg2                           0;	///< Optional element.
/// Element arg3 of type xs:string.
    std::string*                         arg3                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":getPregArrivalsResponse is a complexType.
class ns1__getPregArrivalsResponse
{ public:
/// Vector of ns1__arrival* with length 0..unbounded
    std::vector<ns1__arrival*          > return_                        0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":logout is a complexType.
class ns1__logout
{ public:
/// Element arg0 of type xs:string.
    std::string*                         arg0                           0;	///< Optional element.
/// Element arg1 of type xs:string.
    std::string*                         arg1                           0;	///< Optional element.
/// Element arg2 of type xs:string.
    std::string*                         arg2                           0;	///< Optional element.
/// Element arg3 of type xs:int.
    int                                  arg3                           1;	///< Required element.
/// Element arg4 of type xs:string.
    std::string*                         arg4                           0;	///< Optional element.
/// Element arg5 of type xs:int.
    int                                  arg5                           1;	///< Required element.
/// Element arg6 of type xs:int.
    int                                  arg6                           1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":logoutResponse is a complexType.
class ns1__logoutResponse
{ public:
/// Element return of type xs:int.
    int                                  return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":voltFine is a complexType.
class ns1__voltFine
{ public:
/// Element arg0 of type xs:string.
    std::string*                         arg0                           0;	///< Optional element.
/// Element arg1 of type xs:string.
    std::string*                         arg1                           0;	///< Optional element.
/// Element arg2 of type xs:string.
    std::string*                         arg2                           0;	///< Optional element.
/// Element arg3 of type xs:string.
    std::string*                         arg3                           0;	///< Optional element.
/// Element arg4 of type xs:string.
    std::string*                         arg4                           0;	///< Optional element.
/// Element arg5 of type xs:float.
    float                                arg5                           1;	///< Required element.
/// Element arg6 of type xs:string.
    std::string*                         arg6                           0;	///< Optional element.
/// Element arg7 of type xs:string.
    std::string*                         arg7                           0;	///< Optional element.
/// Element arg8 of type xs:string.
    std::string*                         arg8                           0;	///< Optional element.
/// Element arg9 of type xs:int.
    int                                  arg9                           1;	///< Required element.
/// Element arg10 of type xs:string.
    std::string*                         arg10                          0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":voltFineResponse is a complexType.
class ns1__voltFineResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":exceedFine is a complexType.
class ns1__exceedFine
{ public:
/// Element arg0 of type xs:string.
    std::string*                         arg0                           0;	///< Optional element.
/// Element arg1 of type xs:string.
    std::string*                         arg1                           0;	///< Optional element.
/// Element arg2 of type xs:string.
    std::string*                         arg2                           0;	///< Optional element.
/// Element arg3 of type xs:string.
    std::string*                         arg3                           0;	///< Optional element.
/// Element arg4 of type xs:string.
    std::string*                         arg4                           0;	///< Optional element.
/// Element arg5 of type xs:string.
    std::string*                         arg5                           0;	///< Optional element.
/// Element arg6 of type xs:string.
    std::string*                         arg6                           0;	///< Optional element.
/// Element arg7 of type xs:string.
    std::string*                         arg7                           0;	///< Optional element.
/// Element arg8 of type xs:string.
    std::string*                         arg8                           0;	///< Optional element.
/// Element arg9 of type xs:string.
    std::string*                         arg9                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":exceedFineResponse is a complexType.
class ns1__exceedFineResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":getCircs is a complexType.
class ns1__getCircs
{ public:
/// Element arg0 of type xs:string.
    std::string*                         arg0                           0;	///< Optional element.
/// Element arg1 of type xs:string.
    std::string*                         arg1                           0;	///< Optional element.
/// Element arg2 of type xs:string.
    std::string*                         arg2                           0;	///< Optional element.
/// Element arg3 of type xs:string.
    std::string*                         arg3                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":getCircsResponse is a complexType.
class ns1__getCircsResponse
{ public:
/// Vector of ns1__circ* with length 0..unbounded
    std::vector<ns1__circ*             > return_                        0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":circ is a complexType.
class ns1__circ
{ public:
/// Element attachment of type xs:string.
    wchar_t*                         attachment                     0;	///< Optional element.
/// Element author of type xs:string.
    wchar_t*                         author                         0;	///< Optional element.
/// Element barcode of type xs:string.
    wchar_t*                         barcode                        0;	///< Optional element.
/// Element certId of type xs:string.
    wchar_t*                         certId                         0;	///< Optional element.
/// Element dueDay of type xs:string.
    wchar_t*                         dueDay                         0;	///< Optional element.
/// Element lendDate of type xs:string.
    wchar_t*                         lendDate                       0;	///< Optional element.
/// Element location of type xs:string.
    wchar_t*                         location                       0;	///< Optional element.
/// Element marcRecNo of type xs:string.
    wchar_t*                         marcRecNo                      0;	///< Optional element.
/// Element name of type xs:string.
    wchar_t*                         name                           0;	///< Optional element.
/// Element price of type xs:float.
    float                                price                          1;	///< Required element.
/// Element propNo of type xs:string.
    wchar_t*                         propNo                         0;	///< Optional element.
/// Element renewTimes of type xs:int.
    int                                  renewTimes                     1;	///< Required element.
/// Element title of type xs:string.
    wchar_t*                         title                          0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":getReader is a complexType.
class ns1__getReader
{ public:
/// Element arg0 of type xs:string.
    std::string*                         arg0                           0;	///< Optional element.
/// Element arg1 of type xs:string.
    std::string*                         arg1                           0;	///< Optional element.
/// Element arg2 of type xs:string.
    std::string*                         arg2                           0;	///< Optional element.
/// Element arg3 of type xs:int.
    int                                  arg3                           1;	///< Required element.
/// Element arg4 of type xs:string.
    std::string*                         arg4                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":getReaderResponse is a complexType.
class ns1__getReaderResponse
{ public:
/// Element return of type "http://service.ws.hw.com/":reader.
    ns1__reader*                         return_                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":reader is a complexType.
class ns1__reader
{ public:
/// Element beginDate of type xs:string.
    wchar_t*                         beginDate                      0;	///< Optional element.
/// Element certFlag of type xs:string.
    wchar_t*                         certFlag                       0;	///< Optional element.
/// Element certFlagName of type xs:string.
    wchar_t*                         certFlagName                   0;	///< Optional element.
/// Element certId of type xs:string.
    wchar_t*                         certId                         0;	///< Optional element.
/// Element debt of type xs:float.
    float                                debt                           1;	///< Required element.
/// Element dept of type xs:string.
    wchar_t*                         dept                           0;	///< Optional element.
/// Element email of type xs:string.
    wchar_t*                         email                          0;	///< Optional element.
/// Element endDate of type xs:string.
    wchar_t*                         endDate                        0;	///< Optional element.
/// Element grade of type xs:string.
    wchar_t*                         grade                          0;	///< Optional element.
/// Element idCard of type xs:string.
    wchar_t*                         idCard                         0;	///< Optional element.
/// Element lendQuantity of type xs:int.
    int                                  lendQuantity                   1;	///< Required element.
/// Element limitFlag of type xs:string.
    wchar_t*                         limitFlag                      0;	///< Optional element.
/// Element limitFlagName of type xs:string.
    wchar_t*                         limitFlagName                  0;	///< Optional element.
/// Element maxLendQuantity of type xs:int.
    int                                  maxLendQuantity                1;	///< Required element.
/// Element name of type xs:string.
    wchar_t*                         name                           0;	///< Optional element.
/// Element readerCertId of type xs:string.
    wchar_t*                         readerCertId                   0;	///< Optional element.
/// Element readerDept of type xs:string.
    wchar_t*                         readerDept                     0;	///< Optional element.
/// Element readerType of type xs:string.
    wchar_t*                         readerType                     0;	///< Optional element.
/// Element registerDay of type xs:string.
    wchar_t*                         registerDay                    0;	///< Optional element.
/// Element sex of type xs:string.
    wchar_t*                         sex                            0;	///< Optional element.
/// Element voltFlag of type xs:int.
    int                                  voltFlag                       1;	///< Required element.
/// Element voltFlagName of type xs:string.
    wchar_t*                         voltFlagName                   0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":getDeps is a complexType.
class ns1__getDeps
{ public:
/// Element arg0 of type xs:string.
    std::string*                         arg0                           0;	///< Optional element.
/// Element arg1 of type xs:string.
    std::string*                         arg1                           0;	///< Optional element.
/// Element arg2 of type xs:string.
    std::string*                         arg2                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":getDepsResponse is a complexType.
class ns1__getDepsResponse
{ public:
/// Vector of ns1__simpleBean* with length 0..unbounded
    std::vector<ns1__simpleBean*       > return_                        0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":simpleBean is a complexType.
class ns1__simpleBean
{ public:
/// Element code of type xs:string.
    wchar_t*                         code                           0;	///< Optional element.
/// Element name of type xs:string.
    wchar_t*                         name                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":checkReader is a complexType.
class ns1__checkReader
{ public:
/// Element arg0 of type xs:string.
    std::string*                         arg0                           0;	///< Optional element.
/// Element arg1 of type xs:string.
    std::string*                         arg1                           0;	///< Optional element.
/// Element arg2 of type xs:string.
    std::string*                         arg2                           0;	///< Optional element.
/// Element arg3 of type xs:int.
    int                                  arg3                           1;	///< Required element.
/// Element arg4 of type xs:string.
    std::string*                         arg4                           0;	///< Optional element.
/// Element arg5 of type xs:string.
    std::string*                         arg5                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":checkReaderResponse is a complexType.
class ns1__checkReaderResponse
{ public:
/// Element return of type "http://service.ws.hw.com/":checkRedrResult.
    ns1__checkRedrResult*                return_                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":checkRedrResult is a complexType.
class ns1__checkRedrResult
{ public:
/// Element code of type xs:int.
    int                                  code                           1;	///< Required element.
/// Element reader of type "http://service.ws.hw.com/":reader.
    ns1__reader*                         reader                         0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":getDebts is a complexType.
class ns1__getDebts
{ public:
/// Element arg0 of type xs:string.
    std::string*                         arg0                           0;	///< Optional element.
/// Element arg1 of type xs:string.
    std::string*                         arg1                           0;	///< Optional element.
/// Element arg2 of type xs:string.
    std::string*                         arg2                           0;	///< Optional element.
/// Element arg3 of type xs:string.
    std::string*                         arg3                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":getDebtsResponse is a complexType.
class ns1__getDebtsResponse
{ public:
/// Vector of ns1__debt* with length 0..unbounded
    std::vector<ns1__debt*             > return_                        0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":debt is a complexType.
class ns1__debt
{ public:
/// Element certId of type xs:string.
    wchar_t*                         certId                         0;	///< Optional element.
/// Element debtDealFlag of type xs:string.
    wchar_t*                         debtDealFlag                   0;	///< Optional element.
/// Element debtDealFlagName of type xs:string.
    wchar_t*                         debtDealFlagName               0;	///< Optional element.
/// Element dueFineAmount of type xs:float.
    float                                dueFineAmount                  1;	///< Required element.
/// Element fineAmount of type xs:float.
    float                                fineAmount                     1;	///< Required element.
/// Element lendDate of type xs:string.
    wchar_t*                         lendDate                       0;	///< Optional element.
/// Element locationF of type xs:string.
    wchar_t*                         locationF                      0;	///< Optional element.
/// Element name of type xs:string.
    wchar_t*                         name                           0;	///< Optional element.
/// Element propNo of type xs:string.
    wchar_t*                         propNo                         0;	///< Optional element.
/// Element retDate of type xs:string.
    wchar_t*                         retDate                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":getViolations1 is a complexType.
class ns1__getViolations1
{ public:
/// Element arg0 of type xs:string.
    std::string*                         arg0                           0;	///< Optional element.
/// Element arg1 of type xs:string.
    std::string*                         arg1                           0;	///< Optional element.
/// Element arg2 of type xs:string.
    std::string*                         arg2                           0;	///< Optional element.
/// Element arg3 of type xs:string.
    std::string*                         arg3                           0;	///< Optional element.
/// Element arg4 of type xs:string.
    std::string*                         arg4                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":getViolations1Response is a complexType.
class ns1__getViolations1Response
{ public:
/// Vector of ns1__violation* with length 0..unbounded
    std::vector<ns1__violation*        > return_                        0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":violation is a complexType.
class ns1__violation
{ public:
/// Element certId of type xs:string.
    wchar_t*                         certId                         0;	///< Optional element.
/// Element dealFlag of type xs:string.
    wchar_t*                         dealFlag                       0;	///< Optional element.
/// Element dealFlagName of type xs:string.
    wchar_t*                         dealFlagName                   0;	///< Optional element.
/// Element fineAmount of type xs:float.
    float                                fineAmount                     1;	///< Required element.
/// Element frozEndDate of type xs:string.
    wchar_t*                         frozEndDate                    0;	///< Optional element.
/// Element name of type xs:string.
    wchar_t*                         name                           0;	///< Optional element.
/// Element pulishDate of type xs:string.
    wchar_t*                         pulishDate                     0;	///< Optional element.
/// Element voltName of type xs:string.
    wchar_t*                         voltName                       0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":getRelegates is a complexType.
class ns1__getRelegates
{ public:
/// Element arg0 of type xs:string.
    std::string*                         arg0                           0;	///< Optional element.
/// Element arg1 of type xs:string.
    std::string*                         arg1                           0;	///< Optional element.
/// Element arg2 of type xs:string.
    std::string*                         arg2                           0;	///< Optional element.
/// Element arg3 of type xs:string.
    std::string*                         arg3                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":getRelegatesResponse is a complexType.
class ns1__getRelegatesResponse
{ public:
/// Vector of ns1__relegate* with length 0..unbounded
    std::vector<ns1__relegate*         > return_                        0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":pregOrRelegate is a complexType.
class ns1__pregOrRelegate
{ public:
/// Element callNo of type xs:string.
    wchar_t*                         callNo                         0;	///< Optional element.
/// Element certId of type xs:string.
    wchar_t*                         certId                         0;	///< Optional element.
/// Element dealFlag of type xs:string.
    wchar_t*                         dealFlag                       0;	///< Optional element.
/// Element dealFlagName of type xs:string.
    wchar_t*                         dealFlagName                   0;	///< Optional element.
/// Element location of type xs:string.
    wchar_t*                         location                       0;	///< Optional element.
/// Element name of type xs:string.
    wchar_t*                         name                           0;	///< Optional element.
/// Element title of type xs:string.
    wchar_t*                         title                          0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":getViolations is a complexType.
class ns1__getViolations
{ public:
/// Element arg0 of type xs:string.
    std::string*                         arg0                           0;	///< Optional element.
/// Element arg1 of type xs:string.
    std::string*                         arg1                           0;	///< Optional element.
/// Element arg2 of type xs:string.
    std::string*                         arg2                           0;	///< Optional element.
/// Element arg3 of type xs:string.
    std::string*                         arg3                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":getViolationsResponse is a complexType.
class ns1__getViolationsResponse
{ public:
/// Vector of ns1__violation* with length 0..unbounded
    std::vector<ns1__violation*        > return_                        0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":certLoss is a complexType.
class ns1__certLoss
{ public:
/// Element arg0 of type xs:string.
    std::string*                         arg0                           0;	///< Optional element.
/// Element arg1 of type xs:string.
    std::string*                         arg1                           0;	///< Optional element.
/// Element arg2 of type xs:string.
    std::string*                         arg2                           0;	///< Optional element.
/// Element arg3 of type xs:string.
    std::string*                         arg3                           0;	///< Optional element.
/// Element arg4 of type xs:int.
    int                                  arg4                           1;	///< Required element.
/// Element arg5 of type xs:string.
    std::string*                         arg5                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":certLossResponse is a complexType.
class ns1__certLossResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":getLendHist is a complexType.
class ns1__getLendHist
{ public:
/// Element arg0 of type xs:string.
    std::string*                         arg0                           0;	///< Optional element.
/// Element arg1 of type xs:string.
    std::string*                         arg1                           0;	///< Optional element.
/// Element arg2 of type xs:string.
    std::string*                         arg2                           0;	///< Optional element.
/// Element arg3 of type xs:string.
    std::string*                         arg3                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":getLendHistResponse is a complexType.
class ns1__getLendHistResponse
{ public:
/// Vector of ns1__circ* with length 0..unbounded
    std::vector<ns1__circ*             > return_                        0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":getMarc is a complexType.
class ns1__getMarc
{ public:
/// Element arg0 of type xs:string.
    std::string*                         arg0                           0;	///< Optional element.
/// Element arg1 of type xs:string.
    std::string*                         arg1                           0;	///< Optional element.
/// Element arg2 of type xs:string.
    std::string*                         arg2                           0;	///< Optional element.
/// Element arg3 of type xs:string.
    std::string*                         arg3                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":getMarcResponse is a complexType.
class ns1__getMarcResponse
{ public:
/// Element return of type "http://service.ws.hw.com/":marc.
    ns1__marc*                           return_                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":marc is a complexType.
class ns1__marc
{ public:
/// Element author of type xs:string.
    wchar_t*                         author                         0;	///< Optional element.
/// Element callNo of type xs:string.
    wchar_t*                         callNo                         0;	///< Optional element.
/// Element isbn of type xs:string.
    wchar_t*                         isbn                           0;	///< Optional element.
/// Element marcRecNo of type xs:string.
    wchar_t*                         marcRecNo                      0;	///< Optional element.
/// Element pubYear of type xs:string.
    wchar_t*                         pubYear                        0;	///< Optional element.
/// Element publisher of type xs:string.
    wchar_t*                         publisher                      0;	///< Optional element.
/// Element title of type xs:string.
    wchar_t*                         title                          0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":getAccounts is a complexType.
class ns1__getAccounts
{ public:
/// Element arg0 of type xs:string.
    std::string*                         arg0                           0;	///< Optional element.
/// Element arg1 of type xs:string.
    std::string*                         arg1                           0;	///< Optional element.
/// Element arg2 of type xs:string.
    std::string*                         arg2                           0;	///< Optional element.
/// Element arg3 of type xs:string.
    std::string*                         arg3                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":getAccountsResponse is a complexType.
class ns1__getAccountsResponse
{ public:
/// Vector of ns1__account* with length 0..unbounded
    std::vector<ns1__account*          > return_                        0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":account is a complexType.
class ns1__account
{ public:
/// Element amount of type xs:float.
    float                                amount                         1;	///< Required element.
/// Element billNo of type xs:string.
    wchar_t*                         billNo                         0;	///< Optional element.
/// Element certId of type xs:string.
    wchar_t*                         certId                         0;	///< Optional element.
/// Element name of type xs:string.
    wchar_t*                         name                           0;	///< Optional element.
/// Element paymentFlag of type xs:string.
    wchar_t*                         paymentFlag                    0;	///< Optional element.
/// Element paymentFlagName of type xs:string.
    wchar_t*                         paymentFlagName                0;	///< Optional element.
/// Element paymentItem of type xs:string.
    wchar_t*                         paymentItem                    0;	///< Optional element.
/// Element paymentItemName of type xs:string.
    wchar_t*                         paymentItemName                0;	///< Optional element.
/// Element paymentTime of type xs:string.
    wchar_t*                         paymentTime                    0;	///< Optional element.
/// Element paymentType of type xs:string.
    wchar_t*                         paymentType                    0;	///< Optional element.
/// Element paymentTypeName of type xs:string.
    wchar_t*                         paymentTypeName                0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":getPregs is a complexType.
class ns1__getPregs
{ public:
/// Element arg0 of type xs:string.
    std::string*                         arg0                           0;	///< Optional element.
/// Element arg1 of type xs:string.
    std::string*                         arg1                           0;	///< Optional element.
/// Element arg2 of type xs:string.
    std::string*                         arg2                           0;	///< Optional element.
/// Element arg3 of type xs:string.
    std::string*                         arg3                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":getPregsResponse is a complexType.
class ns1__getPregsResponse
{ public:
/// Vector of ns1__preg* with length 0..unbounded
    std::vector<ns1__preg*             > return_                        0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":registerReader is a complexType.
class ns1__registerReader
{ public:
/// Element arg0 of type xs:string.
    std::string*                         arg0                           0;	///< Optional element.
/// Element arg1 of type xs:string.
    std::string*                         arg1                           0;	///< Optional element.
/// Element arg2 of type xs:string.
    std::string*                         arg2                           0;	///< Optional element.
/// Element arg3 of type xs:string.
    std::string*                         arg3                           0;	///< Optional element.
/// Element arg4 of type xs:string.
    std::string*                         arg4                           0;	///< Optional element.
/// Element arg5 of type xs:string.
    std::string*                         arg5                           0;	///< Optional element.
/// Element arg6 of type xs:string.
    std::string*                         arg6                           0;	///< Optional element.
/// Element arg7 of type xs:string.
    std::string*                         arg7                           0;	///< Optional element.
/// Element arg8 of type xs:string.
    std::string*                         arg8                           0;	///< Optional element.
/// Element arg9 of type xs:string.
    std::string*                         arg9                           0;	///< Optional element.
/// Element arg10 of type xs:string.
    std::string*                         arg10                          0;	///< Optional element.
/// Element arg11 of type xs:string.
    std::string*                         arg11                          0;	///< Optional element.
/// Element arg12 of type xs:string.
    std::string*                         arg12                          0;	///< Optional element.
/// Element arg13 of type xs:string.
    std::string*                         arg13                          0;	///< Optional element.
/// Element arg14 of type xs:string.
    std::string*                         arg14                          0;	///< Optional element.
/// Element arg15 of type xs:string.
    std::string*                         arg15                          0;	///< Optional element.
/// Element arg16 of type xs:string.
    std::string*                         arg16                          0;	///< Optional element.
/// Element arg17 of type xs:string.
    std::string*                         arg17                          0;	///< Optional element.
/// Element arg18 of type xs:string.
    std::string*                         arg18                          0;	///< Optional element.
/// Element arg19 of type xs:string.
    std::string*                         arg19                          0;	///< Optional element.
/// Element arg20 of type xs:string.
    std::string*                         arg20                          0;	///< Optional element.
/// Element arg21 of type xs:string.
    std::string*                         arg21                          0;	///< Optional element.
/// Element arg22 of type xs:string.
    std::string*                         arg22                          0;	///< Optional element.
/// Element arg23 of type xs:string.
    std::string*                         arg23                          0;	///< Optional element.
/// Element arg24 of type xs:string.
    std::string*                         arg24                          0;	///< Optional element.
/// Element arg25 of type xs:string.
    std::string*                         arg25                          0;	///< Optional element.
/// Element arg26 of type xs:string.
    std::string*                         arg26                          0;	///< Optional element.
/// Element arg27 of type xs:string.
    std::string*                         arg27                          0;	///< Optional element.
/// Element arg28 of type xs:string.
    std::string*                         arg28                          0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":registerReaderResponse is a complexType.
class ns1__registerReaderResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":getAccounts1 is a complexType.
class ns1__getAccounts1
{ public:
/// Element arg0 of type xs:string.
    std::string*                         arg0                           0;	///< Optional element.
/// Element arg1 of type xs:string.
    std::string*                         arg1                           0;	///< Optional element.
/// Element arg2 of type xs:string.
    std::string*                         arg2                           0;	///< Optional element.
/// Element arg3 of type xs:string.
    std::string*                         arg3                           0;	///< Optional element.
/// Element arg4 of type xs:string.
    std::string*                         arg4                           0;	///< Optional element.
/// Element arg5 of type xs:string.
    std::string*                         arg5                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":getAccounts1Response is a complexType.
class ns1__getAccounts1Response
{ public:
/// Vector of ns1__account* with length 0..unbounded
    std::vector<ns1__account*          > return_                        0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":getLostPays is a complexType.
class ns1__getLostPays
{ public:
/// Element arg0 of type xs:string.
    std::string*                         arg0                           0;	///< Optional element.
/// Element arg1 of type xs:string.
    std::string*                         arg1                           0;	///< Optional element.
/// Element arg2 of type xs:string.
    std::string*                         arg2                           0;	///< Optional element.
/// Element arg3 of type xs:string.
    std::string*                         arg3                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":getLostPaysResponse is a complexType.
class ns1__getLostPaysResponse
{ public:
/// Vector of ns1__lostPay* with length 0..unbounded
    std::vector<ns1__lostPay*          > return_                        0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":lostPay is a complexType.
class ns1__lostPay
{ public:
/// Element barCode of type xs:string.
    wchar_t*                         barCode                        0;	///< Optional element.
/// Element billNo of type xs:string.
    wchar_t*                         billNo                         0;	///< Optional element.
/// Element bookAmt of type xs:float.
    float                                bookAmt                        1;	///< Required element.
/// Element certId of type xs:string.
    wchar_t*                         certId                         0;	///< Optional element.
/// Element name of type xs:string.
    wchar_t*                         name                           0;	///< Optional element.
/// Element propNo of type xs:string.
    wchar_t*                         propNo                         0;	///< Optional element.
/// Element recoupType of type xs:string.
    wchar_t*                         recoupType                     0;	///< Optional element.
/// Element servFee of type xs:float.
    float                                servFee                        1;	///< Required element.
/// Element techFee of type xs:float.
    float                                techFee                        1;	///< Required element.
/// Element title of type xs:string.
    wchar_t*                         title                          0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":exceedFine1 is a complexType.
class ns1__exceedFine1
{ public:
/// Element arg0 of type xs:string.
    std::string*                         arg0                           0;	///< Optional element.
/// Element arg1 of type xs:string.
    std::string*                         arg1                           0;	///< Optional element.
/// Element arg2 of type xs:string.
    std::string*                         arg2                           0;	///< Optional element.
/// Element arg3 of type xs:string.
    std::string*                         arg3                           0;	///< Optional element.
/// Element arg4 of type xs:string.
    std::string*                         arg4                           0;	///< Optional element.
/// Element arg5 of type xs:string.
    std::string*                         arg5                           0;	///< Optional element.
/// Element arg6 of type xs:string.
    std::string*                         arg6                           0;	///< Optional element.
/// Element arg7 of type xs:float.
    float                                arg7                           1;	///< Required element.
/// Element arg8 of type xs:string.
    std::string*                         arg8                           0;	///< Optional element.
/// Element arg9 of type xs:string.
    std::string*                         arg9                           0;	///< Optional element.
/// Element arg10 of type xs:int.
    int                                  arg10                          1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":exceedFine1Response is a complexType.
class ns1__exceedFine1Response
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":getRedrTypes is a complexType.
class ns1__getRedrTypes
{ public:
/// Element arg0 of type xs:string.
    std::string*                         arg0                           0;	///< Optional element.
/// Element arg1 of type xs:string.
    std::string*                         arg1                           0;	///< Optional element.
/// Element arg2 of type xs:string.
    std::string*                         arg2                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":getRedrTypesResponse is a complexType.
class ns1__getRedrTypesResponse
{ public:
/// Vector of ns1__simpleBean* with length 0..unbounded
    std::vector<ns1__simpleBean*       > return_                        0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://service.ws.hw.com/":relegate is a complexType with complexContent extension of "http://service.ws.hw.com/":pregOrRelegate.
class ns1__relegate : public ns1__pregOrRelegate
{ public:
/*  INHERITED FROM ns1__pregOrRelegate:
/// Element callNo of type xs:string.
    wchar_t*                         callNo                         0;	///< Optional element.
/// Element certId of type xs:string.
    wchar_t*                         certId                         0;	///< Optional element.
/// Element dealFlag of type xs:string.
    wchar_t*                         dealFlag                       0;	///< Optional element.
/// Element dealFlagName of type xs:string.
    wchar_t*                         dealFlagName                   0;	///< Optional element.
/// Element location of type xs:string.
    wchar_t*                         location                       0;	///< Optional element.
/// Element name of type xs:string.
    wchar_t*                         name                           0;	///< Optional element.
/// Element title of type xs:string.
    wchar_t*                         title                          0;	///< Optional element.
    END OF INHERITED */
/// Element relegateDate of type xs:string.
    wchar_t*                         relegateDate                   0;	///< Optional element.
/// Element relegateEndDate of type xs:string.
    wchar_t*                         relegateEndDate                0;	///< Optional element.
};

/// "http://service.ws.hw.com/":preg is a complexType with complexContent extension of "http://service.ws.hw.com/":pregOrRelegate.
class ns1__preg : public ns1__pregOrRelegate
{ public:
/*  INHERITED FROM ns1__pregOrRelegate:
/// Element callNo of type xs:string.
    wchar_t*                         callNo                         0;	///< Optional element.
/// Element certId of type xs:string.
    wchar_t*                         certId                         0;	///< Optional element.
/// Element dealFlag of type xs:string.
    wchar_t*                         dealFlag                       0;	///< Optional element.
/// Element dealFlagName of type xs:string.
    wchar_t*                         dealFlagName                   0;	///< Optional element.
/// Element location of type xs:string.
    wchar_t*                         location                       0;	///< Optional element.
/// Element name of type xs:string.
    wchar_t*                         name                           0;	///< Optional element.
/// Element title of type xs:string.
    wchar_t*                         title                          0;	///< Optional element.
    END OF INHERITED */
/// Element pregDate of type xs:string.
    wchar_t*                         pregDate                       0;	///< Optional element.
/// Element pregEndDate of type xs:string.
    wchar_t*                         pregEndDate                    0;	///< Optional element.
};

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://service.ws.hw.com/                                                *
 *                                                                            *
\******************************************************************************/


/// Top-level root element "http://service.ws.hw.com/":NoAuthorityException of type "http://service.ws.hw.com/":NoAuthorityException.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.ws.hw.com/":SystemException of type "http://service.ws.hw.com/":SystemException.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.ws.hw.com/":certLoss of type "http://service.ws.hw.com/":certLoss.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.ws.hw.com/":certLossResponse of type "http://service.ws.hw.com/":certLossResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.ws.hw.com/":checkReader of type "http://service.ws.hw.com/":checkReader.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.ws.hw.com/":checkReaderResponse of type "http://service.ws.hw.com/":checkReaderResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.ws.hw.com/":exceedFine of type "http://service.ws.hw.com/":exceedFine.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.ws.hw.com/":exceedFine1 of type "http://service.ws.hw.com/":exceedFine1.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.ws.hw.com/":exceedFine1Response of type "http://service.ws.hw.com/":exceedFine1Response.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.ws.hw.com/":exceedFineResponse of type "http://service.ws.hw.com/":exceedFineResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.ws.hw.com/":getAccounts of type "http://service.ws.hw.com/":getAccounts.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.ws.hw.com/":getAccounts1 of type "http://service.ws.hw.com/":getAccounts1.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.ws.hw.com/":getAccounts1Response of type "http://service.ws.hw.com/":getAccounts1Response.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.ws.hw.com/":getAccountsResponse of type "http://service.ws.hw.com/":getAccountsResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.ws.hw.com/":getBook of type "http://service.ws.hw.com/":getBook.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.ws.hw.com/":getBookResponse of type "http://service.ws.hw.com/":getBookResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.ws.hw.com/":getCircs of type "http://service.ws.hw.com/":getCircs.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.ws.hw.com/":getCircsResponse of type "http://service.ws.hw.com/":getCircsResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.ws.hw.com/":getDebts of type "http://service.ws.hw.com/":getDebts.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.ws.hw.com/":getDebtsResponse of type "http://service.ws.hw.com/":getDebtsResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.ws.hw.com/":getDeps of type "http://service.ws.hw.com/":getDeps.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.ws.hw.com/":getDepsResponse of type "http://service.ws.hw.com/":getDepsResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.ws.hw.com/":getItems of type "http://service.ws.hw.com/":getItems.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.ws.hw.com/":getItemsResponse of type "http://service.ws.hw.com/":getItemsResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.ws.hw.com/":getLendHist of type "http://service.ws.hw.com/":getLendHist.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.ws.hw.com/":getLendHistResponse of type "http://service.ws.hw.com/":getLendHistResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.ws.hw.com/":getLostPays of type "http://service.ws.hw.com/":getLostPays.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.ws.hw.com/":getLostPaysResponse of type "http://service.ws.hw.com/":getLostPaysResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.ws.hw.com/":getMarc of type "http://service.ws.hw.com/":getMarc.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.ws.hw.com/":getMarcResponse of type "http://service.ws.hw.com/":getMarcResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.ws.hw.com/":getPregArrivals of type "http://service.ws.hw.com/":getPregArrivals.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.ws.hw.com/":getPregArrivalsResponse of type "http://service.ws.hw.com/":getPregArrivalsResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.ws.hw.com/":getPregs of type "http://service.ws.hw.com/":getPregs.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.ws.hw.com/":getPregsResponse of type "http://service.ws.hw.com/":getPregsResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.ws.hw.com/":getReader of type "http://service.ws.hw.com/":getReader.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.ws.hw.com/":getReaderResponse of type "http://service.ws.hw.com/":getReaderResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.ws.hw.com/":getRedrTypes of type "http://service.ws.hw.com/":getRedrTypes.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.ws.hw.com/":getRedrTypesResponse of type "http://service.ws.hw.com/":getRedrTypesResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.ws.hw.com/":getRelegateArrivals of type "http://service.ws.hw.com/":getRelegateArrivals.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.ws.hw.com/":getRelegateArrivalsResponse of type "http://service.ws.hw.com/":getRelegateArrivalsResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.ws.hw.com/":getRelegates of type "http://service.ws.hw.com/":getRelegates.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.ws.hw.com/":getRelegatesResponse of type "http://service.ws.hw.com/":getRelegatesResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.ws.hw.com/":getViolations of type "http://service.ws.hw.com/":getViolations.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.ws.hw.com/":getViolations1 of type "http://service.ws.hw.com/":getViolations1.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.ws.hw.com/":getViolations1Response of type "http://service.ws.hw.com/":getViolations1Response.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.ws.hw.com/":getViolationsResponse of type "http://service.ws.hw.com/":getViolationsResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.ws.hw.com/":logout of type "http://service.ws.hw.com/":logout.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.ws.hw.com/":logoutResponse of type "http://service.ws.hw.com/":logoutResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.ws.hw.com/":registerReader of type "http://service.ws.hw.com/":registerReader.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.ws.hw.com/":registerReaderResponse of type "http://service.ws.hw.com/":registerReaderResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.ws.hw.com/":voltFine of type "http://service.ws.hw.com/":voltFine.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://service.ws.hw.com/":voltFineResponse of type "http://service.ws.hw.com/":voltFineResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://service.ws.hw.com/                                                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	LibServicePortBinding 
//gsoap ns1  service type:	LibServiceDelegate 
//gsoap ns1  service port:	http://202.119.108.209:8080/HWWebService/LibServicePort 
//gsoap ns1  service namespace:	http://service.ws.hw.com/ 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage LibService Definitions

@section LibService_bindings Service Bindings
  - @ref LibServicePortBinding

@section LibService_more More Information
- @ref page_notes "Notes"
- @ref page_XMLDataBinding "XML Data Binding"
- @ref SOAP_ENV__Header "SOAP Header Content"
- @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page LibServicePortBinding Binding "LibServicePortBinding"

@section LibServicePortBinding_operations Operations of Binding  "LibServicePortBinding"
  - @ref __ns1__getReader
  - @ref __ns1__getItems
  - @ref __ns1__getBook
  - @ref __ns1__getCircs
  - @ref __ns1__getViolations
  - @ref __ns1__getDebts
  - @ref __ns1__getPregArrivals
  - @ref __ns1__getRelegateArrivals
  - @ref __ns1__getPregs
  - @ref __ns1__getRelegates
  - @ref __ns1__getAccounts
  - @ref __ns1__getLostPays
  - @ref __ns1__exceedFine
  - @ref __ns1__certLoss
  - @ref __ns1__logout
  - @ref __ns1__getLendHist
  - @ref __ns1__getMarc
  - @ref __ns1__checkReader
  - @ref __ns1__voltFine
  - @ref __ns1__getViolations1
  - @ref __ns1__exceedFine1
  - @ref __ns1__registerReader
  - @ref __ns1__getRedrTypes
  - @ref __ns1__getDeps
  - @ref __ns1__getAccounts1

@section LibServicePortBinding_ports Endpoints of Binding  "LibServicePortBinding"
  - http://202.119.108.209:8080/HWWebService/LibServicePort

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * SOAP Fault Detail                                                          *
 *                                                                            *
\******************************************************************************/

/**

The SOAP Fault is part of the gSOAP context and its content is accessed
through the soap.fault->detail variable (SOAP 1.1) or the
soap.fault->SOAP_ENV__Detail variable (SOAP 1.2).
Use option -j to omit.

*/
struct SOAP_ENV__Detail
{
// xsd:anyAttribute omitted: to parse attribute content of the Detail element into DOM anyAttribute, use wsdl2h option -d.
    ns1__NoAuthorityException*           ns1__NoAuthorityException_    ;
///< SOAP Fault element ""http://service.ws.hw.com/":NoAuthorityException" part "fault"
    ns1__SystemException*                ns1__SystemException_         ;
///< SOAP Fault element ""http://service.ws.hw.com/":SystemException" part "fault"
    int                                  __type                        ;	///< set to SOAP_TYPE_X for a serializable type X
    void                                *fault                         ;	///< points to serializable object X or NULL
    _XML                                 __any                         ;	///< Catch any element content in XML string.
};

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   LibServicePortBinding                                                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getReader                                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getReader" of service binding "LibServicePortBinding"

/**

Operation details:

  - SOAP document/literal style
  - SOAP Fault: "http://service.ws.hw.com/":NoAuthorityException (literal)
  - SOAP Fault: "http://service.ws.hw.com/":SystemException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getReader(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__getReader*                     ns1__getReader_,
    // response parameters:
    ns1__getReaderResponse*             ns1__getReaderResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getReader(
    struct soap *soap,
    // request parameters:
    ns1__getReader*                     ns1__getReader_,
    // response parameters:
    ns1__getReaderResponse*             ns1__getReaderResponse_
  );
@endcode

C++ proxy class (defined in soapLibServicePortBindingProxy.h):
@code
  class LibServicePortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapLibServicePortBindingService.h):
@code
  class LibServicePortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getReader document
//gsoap ns1  service method-encoding:	getReader literal
//gsoap ns1  service method-action:	getReader ""
//gsoap ns1  service method-fault:	getReader ns1__NoAuthorityException_
//gsoap ns1  service method-fault:	getReader ns1__SystemException_
int __ns1__getReader(
    ns1__getReader*                     ns1__getReader_,	///< Request parameter
    ns1__getReaderResponse*             ns1__getReaderResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getItems                                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getItems" of service binding "LibServicePortBinding"

/**

Operation details:

  - SOAP document/literal style
  - SOAP Fault: "http://service.ws.hw.com/":NoAuthorityException (literal)
  - SOAP Fault: "http://service.ws.hw.com/":SystemException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getItems(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__getItems*                      ns1__getItems_,
    // response parameters:
    ns1__getItemsResponse*              ns1__getItemsResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getItems(
    struct soap *soap,
    // request parameters:
    ns1__getItems*                      ns1__getItems_,
    // response parameters:
    ns1__getItemsResponse*              ns1__getItemsResponse_
  );
@endcode

C++ proxy class (defined in soapLibServicePortBindingProxy.h):
@code
  class LibServicePortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapLibServicePortBindingService.h):
@code
  class LibServicePortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getItems document
//gsoap ns1  service method-encoding:	getItems literal
//gsoap ns1  service method-action:	getItems ""
//gsoap ns1  service method-fault:	getItems ns1__NoAuthorityException_
//gsoap ns1  service method-fault:	getItems ns1__SystemException_
int __ns1__getItems(
    ns1__getItems*                      ns1__getItems_,	///< Request parameter
    ns1__getItemsResponse*              ns1__getItemsResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getBook                                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getBook" of service binding "LibServicePortBinding"

/**

Operation details:

  - SOAP document/literal style
  - SOAP Fault: "http://service.ws.hw.com/":NoAuthorityException (literal)
  - SOAP Fault: "http://service.ws.hw.com/":SystemException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getBook(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__getBook*                       ns1__getBook_,
    // response parameters:
    ns1__getBookResponse*               ns1__getBookResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getBook(
    struct soap *soap,
    // request parameters:
    ns1__getBook*                       ns1__getBook_,
    // response parameters:
    ns1__getBookResponse*               ns1__getBookResponse_
  );
@endcode

C++ proxy class (defined in soapLibServicePortBindingProxy.h):
@code
  class LibServicePortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapLibServicePortBindingService.h):
@code
  class LibServicePortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getBook document
//gsoap ns1  service method-encoding:	getBook literal
//gsoap ns1  service method-action:	getBook ""
//gsoap ns1  service method-fault:	getBook ns1__NoAuthorityException_
//gsoap ns1  service method-fault:	getBook ns1__SystemException_
int __ns1__getBook(
    ns1__getBook*                       ns1__getBook_,	///< Request parameter
    ns1__getBookResponse*               ns1__getBookResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getCircs                                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getCircs" of service binding "LibServicePortBinding"

/**

Operation details:

  - SOAP document/literal style
  - SOAP Fault: "http://service.ws.hw.com/":NoAuthorityException (literal)
  - SOAP Fault: "http://service.ws.hw.com/":SystemException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getCircs(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__getCircs*                      ns1__getCircs_,
    // response parameters:
    ns1__getCircsResponse*              ns1__getCircsResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getCircs(
    struct soap *soap,
    // request parameters:
    ns1__getCircs*                      ns1__getCircs_,
    // response parameters:
    ns1__getCircsResponse*              ns1__getCircsResponse_
  );
@endcode

C++ proxy class (defined in soapLibServicePortBindingProxy.h):
@code
  class LibServicePortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapLibServicePortBindingService.h):
@code
  class LibServicePortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getCircs document
//gsoap ns1  service method-encoding:	getCircs literal
//gsoap ns1  service method-action:	getCircs ""
//gsoap ns1  service method-fault:	getCircs ns1__NoAuthorityException_
//gsoap ns1  service method-fault:	getCircs ns1__SystemException_
int __ns1__getCircs(
    ns1__getCircs*                      ns1__getCircs_,	///< Request parameter
    ns1__getCircsResponse*              ns1__getCircsResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getViolations                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getViolations" of service binding "LibServicePortBinding"

/**

Operation details:

  - SOAP document/literal style
  - SOAP Fault: "http://service.ws.hw.com/":NoAuthorityException (literal)
  - SOAP Fault: "http://service.ws.hw.com/":SystemException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getViolations(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__getViolations*                 ns1__getViolations_,
    // response parameters:
    ns1__getViolationsResponse*         ns1__getViolationsResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getViolations(
    struct soap *soap,
    // request parameters:
    ns1__getViolations*                 ns1__getViolations_,
    // response parameters:
    ns1__getViolationsResponse*         ns1__getViolationsResponse_
  );
@endcode

C++ proxy class (defined in soapLibServicePortBindingProxy.h):
@code
  class LibServicePortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapLibServicePortBindingService.h):
@code
  class LibServicePortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getViolations document
//gsoap ns1  service method-encoding:	getViolations literal
//gsoap ns1  service method-action:	getViolations ""
//gsoap ns1  service method-fault:	getViolations ns1__NoAuthorityException_
//gsoap ns1  service method-fault:	getViolations ns1__SystemException_
int __ns1__getViolations(
    ns1__getViolations*                 ns1__getViolations_,	///< Request parameter
    ns1__getViolationsResponse*         ns1__getViolationsResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getDebts                                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getDebts" of service binding "LibServicePortBinding"

/**

Operation details:

  - SOAP document/literal style
  - SOAP Fault: "http://service.ws.hw.com/":NoAuthorityException (literal)
  - SOAP Fault: "http://service.ws.hw.com/":SystemException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getDebts(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__getDebts*                      ns1__getDebts_,
    // response parameters:
    ns1__getDebtsResponse*              ns1__getDebtsResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getDebts(
    struct soap *soap,
    // request parameters:
    ns1__getDebts*                      ns1__getDebts_,
    // response parameters:
    ns1__getDebtsResponse*              ns1__getDebtsResponse_
  );
@endcode

C++ proxy class (defined in soapLibServicePortBindingProxy.h):
@code
  class LibServicePortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapLibServicePortBindingService.h):
@code
  class LibServicePortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getDebts document
//gsoap ns1  service method-encoding:	getDebts literal
//gsoap ns1  service method-action:	getDebts ""
//gsoap ns1  service method-fault:	getDebts ns1__NoAuthorityException_
//gsoap ns1  service method-fault:	getDebts ns1__SystemException_
int __ns1__getDebts(
    ns1__getDebts*                      ns1__getDebts_,	///< Request parameter
    ns1__getDebtsResponse*              ns1__getDebtsResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getPregArrivals                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getPregArrivals" of service binding "LibServicePortBinding"

/**

Operation details:

  - SOAP document/literal style
  - SOAP Fault: "http://service.ws.hw.com/":NoAuthorityException (literal)
  - SOAP Fault: "http://service.ws.hw.com/":SystemException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getPregArrivals(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__getPregArrivals*               ns1__getPregArrivals_,
    // response parameters:
    ns1__getPregArrivalsResponse*       ns1__getPregArrivalsResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getPregArrivals(
    struct soap *soap,
    // request parameters:
    ns1__getPregArrivals*               ns1__getPregArrivals_,
    // response parameters:
    ns1__getPregArrivalsResponse*       ns1__getPregArrivalsResponse_
  );
@endcode

C++ proxy class (defined in soapLibServicePortBindingProxy.h):
@code
  class LibServicePortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapLibServicePortBindingService.h):
@code
  class LibServicePortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getPregArrivals document
//gsoap ns1  service method-encoding:	getPregArrivals literal
//gsoap ns1  service method-action:	getPregArrivals ""
//gsoap ns1  service method-fault:	getPregArrivals ns1__NoAuthorityException_
//gsoap ns1  service method-fault:	getPregArrivals ns1__SystemException_
int __ns1__getPregArrivals(
    ns1__getPregArrivals*               ns1__getPregArrivals_,	///< Request parameter
    ns1__getPregArrivalsResponse*       ns1__getPregArrivalsResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getRelegateArrivals                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getRelegateArrivals" of service binding "LibServicePortBinding"

/**

Operation details:

  - SOAP document/literal style
  - SOAP Fault: "http://service.ws.hw.com/":NoAuthorityException (literal)
  - SOAP Fault: "http://service.ws.hw.com/":SystemException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getRelegateArrivals(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__getRelegateArrivals*           ns1__getRelegateArrivals_,
    // response parameters:
    ns1__getRelegateArrivalsResponse*   ns1__getRelegateArrivalsResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getRelegateArrivals(
    struct soap *soap,
    // request parameters:
    ns1__getRelegateArrivals*           ns1__getRelegateArrivals_,
    // response parameters:
    ns1__getRelegateArrivalsResponse*   ns1__getRelegateArrivalsResponse_
  );
@endcode

C++ proxy class (defined in soapLibServicePortBindingProxy.h):
@code
  class LibServicePortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapLibServicePortBindingService.h):
@code
  class LibServicePortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getRelegateArrivals document
//gsoap ns1  service method-encoding:	getRelegateArrivals literal
//gsoap ns1  service method-action:	getRelegateArrivals ""
//gsoap ns1  service method-fault:	getRelegateArrivals ns1__NoAuthorityException_
//gsoap ns1  service method-fault:	getRelegateArrivals ns1__SystemException_
int __ns1__getRelegateArrivals(
    ns1__getRelegateArrivals*           ns1__getRelegateArrivals_,	///< Request parameter
    ns1__getRelegateArrivalsResponse*   ns1__getRelegateArrivalsResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getPregs                                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getPregs" of service binding "LibServicePortBinding"

/**

Operation details:

  - SOAP document/literal style
  - SOAP Fault: "http://service.ws.hw.com/":NoAuthorityException (literal)
  - SOAP Fault: "http://service.ws.hw.com/":SystemException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getPregs(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__getPregs*                      ns1__getPregs_,
    // response parameters:
    ns1__getPregsResponse*              ns1__getPregsResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getPregs(
    struct soap *soap,
    // request parameters:
    ns1__getPregs*                      ns1__getPregs_,
    // response parameters:
    ns1__getPregsResponse*              ns1__getPregsResponse_
  );
@endcode

C++ proxy class (defined in soapLibServicePortBindingProxy.h):
@code
  class LibServicePortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapLibServicePortBindingService.h):
@code
  class LibServicePortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getPregs document
//gsoap ns1  service method-encoding:	getPregs literal
//gsoap ns1  service method-action:	getPregs ""
//gsoap ns1  service method-fault:	getPregs ns1__NoAuthorityException_
//gsoap ns1  service method-fault:	getPregs ns1__SystemException_
int __ns1__getPregs(
    ns1__getPregs*                      ns1__getPregs_,	///< Request parameter
    ns1__getPregsResponse*              ns1__getPregsResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getRelegates                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getRelegates" of service binding "LibServicePortBinding"

/**

Operation details:

  - SOAP document/literal style
  - SOAP Fault: "http://service.ws.hw.com/":NoAuthorityException (literal)
  - SOAP Fault: "http://service.ws.hw.com/":SystemException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getRelegates(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__getRelegates*                  ns1__getRelegates_,
    // response parameters:
    ns1__getRelegatesResponse*          ns1__getRelegatesResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getRelegates(
    struct soap *soap,
    // request parameters:
    ns1__getRelegates*                  ns1__getRelegates_,
    // response parameters:
    ns1__getRelegatesResponse*          ns1__getRelegatesResponse_
  );
@endcode

C++ proxy class (defined in soapLibServicePortBindingProxy.h):
@code
  class LibServicePortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapLibServicePortBindingService.h):
@code
  class LibServicePortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getRelegates document
//gsoap ns1  service method-encoding:	getRelegates literal
//gsoap ns1  service method-action:	getRelegates ""
//gsoap ns1  service method-fault:	getRelegates ns1__NoAuthorityException_
//gsoap ns1  service method-fault:	getRelegates ns1__SystemException_
int __ns1__getRelegates(
    ns1__getRelegates*                  ns1__getRelegates_,	///< Request parameter
    ns1__getRelegatesResponse*          ns1__getRelegatesResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getAccounts                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getAccounts" of service binding "LibServicePortBinding"

/**

Operation details:

  - SOAP document/literal style
  - SOAP Fault: "http://service.ws.hw.com/":NoAuthorityException (literal)
  - SOAP Fault: "http://service.ws.hw.com/":SystemException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getAccounts(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__getAccounts*                   ns1__getAccounts_,
    // response parameters:
    ns1__getAccountsResponse*           ns1__getAccountsResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getAccounts(
    struct soap *soap,
    // request parameters:
    ns1__getAccounts*                   ns1__getAccounts_,
    // response parameters:
    ns1__getAccountsResponse*           ns1__getAccountsResponse_
  );
@endcode

C++ proxy class (defined in soapLibServicePortBindingProxy.h):
@code
  class LibServicePortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapLibServicePortBindingService.h):
@code
  class LibServicePortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getAccounts document
//gsoap ns1  service method-encoding:	getAccounts literal
//gsoap ns1  service method-action:	getAccounts ""
//gsoap ns1  service method-fault:	getAccounts ns1__NoAuthorityException_
//gsoap ns1  service method-fault:	getAccounts ns1__SystemException_
int __ns1__getAccounts(
    ns1__getAccounts*                   ns1__getAccounts_,	///< Request parameter
    ns1__getAccountsResponse*           ns1__getAccountsResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getLostPays                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getLostPays" of service binding "LibServicePortBinding"

/**

Operation details:

  - SOAP document/literal style
  - SOAP Fault: "http://service.ws.hw.com/":NoAuthorityException (literal)
  - SOAP Fault: "http://service.ws.hw.com/":SystemException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getLostPays(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__getLostPays*                   ns1__getLostPays_,
    // response parameters:
    ns1__getLostPaysResponse*           ns1__getLostPaysResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getLostPays(
    struct soap *soap,
    // request parameters:
    ns1__getLostPays*                   ns1__getLostPays_,
    // response parameters:
    ns1__getLostPaysResponse*           ns1__getLostPaysResponse_
  );
@endcode

C++ proxy class (defined in soapLibServicePortBindingProxy.h):
@code
  class LibServicePortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapLibServicePortBindingService.h):
@code
  class LibServicePortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getLostPays document
//gsoap ns1  service method-encoding:	getLostPays literal
//gsoap ns1  service method-action:	getLostPays ""
//gsoap ns1  service method-fault:	getLostPays ns1__NoAuthorityException_
//gsoap ns1  service method-fault:	getLostPays ns1__SystemException_
int __ns1__getLostPays(
    ns1__getLostPays*                   ns1__getLostPays_,	///< Request parameter
    ns1__getLostPaysResponse*           ns1__getLostPaysResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__exceedFine                                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__exceedFine" of service binding "LibServicePortBinding"

/**

Operation details:

  - SOAP document/literal style
  - SOAP Fault: "http://service.ws.hw.com/":NoAuthorityException (literal)
  - SOAP Fault: "http://service.ws.hw.com/":SystemException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__exceedFine(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__exceedFine*                    ns1__exceedFine_,
    // response parameters:
    ns1__exceedFineResponse*            ns1__exceedFineResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__exceedFine(
    struct soap *soap,
    // request parameters:
    ns1__exceedFine*                    ns1__exceedFine_,
    // response parameters:
    ns1__exceedFineResponse*            ns1__exceedFineResponse_
  );
@endcode

C++ proxy class (defined in soapLibServicePortBindingProxy.h):
@code
  class LibServicePortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapLibServicePortBindingService.h):
@code
  class LibServicePortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	exceedFine document
//gsoap ns1  service method-encoding:	exceedFine literal
//gsoap ns1  service method-action:	exceedFine ""
//gsoap ns1  service method-fault:	exceedFine ns1__NoAuthorityException_
//gsoap ns1  service method-fault:	exceedFine ns1__SystemException_
int __ns1__exceedFine(
    ns1__exceedFine*                    ns1__exceedFine_,	///< Request parameter
    ns1__exceedFineResponse*            ns1__exceedFineResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__certLoss                                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__certLoss" of service binding "LibServicePortBinding"

/**

Operation details:

  - SOAP document/literal style
  - SOAP Fault: "http://service.ws.hw.com/":NoAuthorityException (literal)
  - SOAP Fault: "http://service.ws.hw.com/":SystemException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__certLoss(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__certLoss*                      ns1__certLoss_,
    // response parameters:
    ns1__certLossResponse*              ns1__certLossResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__certLoss(
    struct soap *soap,
    // request parameters:
    ns1__certLoss*                      ns1__certLoss_,
    // response parameters:
    ns1__certLossResponse*              ns1__certLossResponse_
  );
@endcode

C++ proxy class (defined in soapLibServicePortBindingProxy.h):
@code
  class LibServicePortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapLibServicePortBindingService.h):
@code
  class LibServicePortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	certLoss document
//gsoap ns1  service method-encoding:	certLoss literal
//gsoap ns1  service method-action:	certLoss ""
//gsoap ns1  service method-fault:	certLoss ns1__NoAuthorityException_
//gsoap ns1  service method-fault:	certLoss ns1__SystemException_
int __ns1__certLoss(
    ns1__certLoss*                      ns1__certLoss_,	///< Request parameter
    ns1__certLossResponse*              ns1__certLossResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__logout                                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__logout" of service binding "LibServicePortBinding"

/**

Operation details:

  - SOAP document/literal style
  - SOAP Fault: "http://service.ws.hw.com/":NoAuthorityException (literal)
  - SOAP Fault: "http://service.ws.hw.com/":SystemException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__logout(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__logout*                        ns1__logout_,
    // response parameters:
    ns1__logoutResponse*                ns1__logoutResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__logout(
    struct soap *soap,
    // request parameters:
    ns1__logout*                        ns1__logout_,
    // response parameters:
    ns1__logoutResponse*                ns1__logoutResponse_
  );
@endcode

C++ proxy class (defined in soapLibServicePortBindingProxy.h):
@code
  class LibServicePortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapLibServicePortBindingService.h):
@code
  class LibServicePortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	logout document
//gsoap ns1  service method-encoding:	logout literal
//gsoap ns1  service method-action:	logout ""
//gsoap ns1  service method-fault:	logout ns1__NoAuthorityException_
//gsoap ns1  service method-fault:	logout ns1__SystemException_
int __ns1__logout(
    ns1__logout*                        ns1__logout_,	///< Request parameter
    ns1__logoutResponse*                ns1__logoutResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getLendHist                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getLendHist" of service binding "LibServicePortBinding"

/**

Operation details:

  - SOAP document/literal style
  - SOAP Fault: "http://service.ws.hw.com/":NoAuthorityException (literal)
  - SOAP Fault: "http://service.ws.hw.com/":SystemException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getLendHist(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__getLendHist*                   ns1__getLendHist_,
    // response parameters:
    ns1__getLendHistResponse*           ns1__getLendHistResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getLendHist(
    struct soap *soap,
    // request parameters:
    ns1__getLendHist*                   ns1__getLendHist_,
    // response parameters:
    ns1__getLendHistResponse*           ns1__getLendHistResponse_
  );
@endcode

C++ proxy class (defined in soapLibServicePortBindingProxy.h):
@code
  class LibServicePortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapLibServicePortBindingService.h):
@code
  class LibServicePortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getLendHist document
//gsoap ns1  service method-encoding:	getLendHist literal
//gsoap ns1  service method-action:	getLendHist ""
//gsoap ns1  service method-fault:	getLendHist ns1__NoAuthorityException_
//gsoap ns1  service method-fault:	getLendHist ns1__SystemException_
int __ns1__getLendHist(
    ns1__getLendHist*                   ns1__getLendHist_,	///< Request parameter
    ns1__getLendHistResponse*           ns1__getLendHistResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getMarc                                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getMarc" of service binding "LibServicePortBinding"

/**

Operation details:

  - SOAP document/literal style
  - SOAP Fault: "http://service.ws.hw.com/":NoAuthorityException (literal)
  - SOAP Fault: "http://service.ws.hw.com/":SystemException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getMarc(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__getMarc*                       ns1__getMarc_,
    // response parameters:
    ns1__getMarcResponse*               ns1__getMarcResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getMarc(
    struct soap *soap,
    // request parameters:
    ns1__getMarc*                       ns1__getMarc_,
    // response parameters:
    ns1__getMarcResponse*               ns1__getMarcResponse_
  );
@endcode

C++ proxy class (defined in soapLibServicePortBindingProxy.h):
@code
  class LibServicePortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapLibServicePortBindingService.h):
@code
  class LibServicePortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getMarc document
//gsoap ns1  service method-encoding:	getMarc literal
//gsoap ns1  service method-action:	getMarc ""
//gsoap ns1  service method-fault:	getMarc ns1__NoAuthorityException_
//gsoap ns1  service method-fault:	getMarc ns1__SystemException_
int __ns1__getMarc(
    ns1__getMarc*                       ns1__getMarc_,	///< Request parameter
    ns1__getMarcResponse*               ns1__getMarcResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__checkReader                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__checkReader" of service binding "LibServicePortBinding"

/**

Operation details:

  - SOAP document/literal style
  - SOAP Fault: "http://service.ws.hw.com/":NoAuthorityException (literal)
  - SOAP Fault: "http://service.ws.hw.com/":SystemException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__checkReader(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__checkReader*                   ns1__checkReader_,
    // response parameters:
    ns1__checkReaderResponse*           ns1__checkReaderResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__checkReader(
    struct soap *soap,
    // request parameters:
    ns1__checkReader*                   ns1__checkReader_,
    // response parameters:
    ns1__checkReaderResponse*           ns1__checkReaderResponse_
  );
@endcode

C++ proxy class (defined in soapLibServicePortBindingProxy.h):
@code
  class LibServicePortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapLibServicePortBindingService.h):
@code
  class LibServicePortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	checkReader document
//gsoap ns1  service method-encoding:	checkReader literal
//gsoap ns1  service method-action:	checkReader ""
//gsoap ns1  service method-fault:	checkReader ns1__NoAuthorityException_
//gsoap ns1  service method-fault:	checkReader ns1__SystemException_
int __ns1__checkReader(
    ns1__checkReader*                   ns1__checkReader_,	///< Request parameter
    ns1__checkReaderResponse*           ns1__checkReaderResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__voltFine                                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__voltFine" of service binding "LibServicePortBinding"

/**

Operation details:

  - SOAP document/literal style
  - SOAP Fault: "http://service.ws.hw.com/":NoAuthorityException (literal)
  - SOAP Fault: "http://service.ws.hw.com/":SystemException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__voltFine(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__voltFine*                      ns1__voltFine_,
    // response parameters:
    ns1__voltFineResponse*              ns1__voltFineResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__voltFine(
    struct soap *soap,
    // request parameters:
    ns1__voltFine*                      ns1__voltFine_,
    // response parameters:
    ns1__voltFineResponse*              ns1__voltFineResponse_
  );
@endcode

C++ proxy class (defined in soapLibServicePortBindingProxy.h):
@code
  class LibServicePortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapLibServicePortBindingService.h):
@code
  class LibServicePortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	voltFine document
//gsoap ns1  service method-encoding:	voltFine literal
//gsoap ns1  service method-action:	voltFine ""
//gsoap ns1  service method-fault:	voltFine ns1__NoAuthorityException_
//gsoap ns1  service method-fault:	voltFine ns1__SystemException_
int __ns1__voltFine(
    ns1__voltFine*                      ns1__voltFine_,	///< Request parameter
    ns1__voltFineResponse*              ns1__voltFineResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getViolations1                                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getViolations1" of service binding "LibServicePortBinding"

/**

Operation details:

  - SOAP document/literal style
  - SOAP Fault: "http://service.ws.hw.com/":NoAuthorityException (literal)
  - SOAP Fault: "http://service.ws.hw.com/":SystemException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getViolations1(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__getViolations1*                ns1__getViolations1_,
    // response parameters:
    ns1__getViolations1Response*        ns1__getViolations1Response_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getViolations1(
    struct soap *soap,
    // request parameters:
    ns1__getViolations1*                ns1__getViolations1_,
    // response parameters:
    ns1__getViolations1Response*        ns1__getViolations1Response_
  );
@endcode

C++ proxy class (defined in soapLibServicePortBindingProxy.h):
@code
  class LibServicePortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapLibServicePortBindingService.h):
@code
  class LibServicePortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getViolations1 document
//gsoap ns1  service method-encoding:	getViolations1 literal
//gsoap ns1  service method-action:	getViolations1 ""
//gsoap ns1  service method-fault:	getViolations1 ns1__NoAuthorityException_
//gsoap ns1  service method-fault:	getViolations1 ns1__SystemException_
int __ns1__getViolations1(
    ns1__getViolations1*                ns1__getViolations1_,	///< Request parameter
    ns1__getViolations1Response*        ns1__getViolations1Response_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__exceedFine1                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__exceedFine1" of service binding "LibServicePortBinding"

/**

Operation details:

  - SOAP document/literal style
  - SOAP Fault: "http://service.ws.hw.com/":NoAuthorityException (literal)
  - SOAP Fault: "http://service.ws.hw.com/":SystemException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__exceedFine1(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__exceedFine1*                   ns1__exceedFine1_,
    // response parameters:
    ns1__exceedFine1Response*           ns1__exceedFine1Response_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__exceedFine1(
    struct soap *soap,
    // request parameters:
    ns1__exceedFine1*                   ns1__exceedFine1_,
    // response parameters:
    ns1__exceedFine1Response*           ns1__exceedFine1Response_
  );
@endcode

C++ proxy class (defined in soapLibServicePortBindingProxy.h):
@code
  class LibServicePortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapLibServicePortBindingService.h):
@code
  class LibServicePortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	exceedFine1 document
//gsoap ns1  service method-encoding:	exceedFine1 literal
//gsoap ns1  service method-action:	exceedFine1 ""
//gsoap ns1  service method-fault:	exceedFine1 ns1__NoAuthorityException_
//gsoap ns1  service method-fault:	exceedFine1 ns1__SystemException_
int __ns1__exceedFine1(
    ns1__exceedFine1*                   ns1__exceedFine1_,	///< Request parameter
    ns1__exceedFine1Response*           ns1__exceedFine1Response_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__registerReader                                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__registerReader" of service binding "LibServicePortBinding"

/**

Operation details:

  - SOAP document/literal style
  - SOAP Fault: "http://service.ws.hw.com/":NoAuthorityException (literal)
  - SOAP Fault: "http://service.ws.hw.com/":SystemException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__registerReader(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__registerReader*                ns1__registerReader_,
    // response parameters:
    ns1__registerReaderResponse*        ns1__registerReaderResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__registerReader(
    struct soap *soap,
    // request parameters:
    ns1__registerReader*                ns1__registerReader_,
    // response parameters:
    ns1__registerReaderResponse*        ns1__registerReaderResponse_
  );
@endcode

C++ proxy class (defined in soapLibServicePortBindingProxy.h):
@code
  class LibServicePortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapLibServicePortBindingService.h):
@code
  class LibServicePortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	registerReader document
//gsoap ns1  service method-encoding:	registerReader literal
//gsoap ns1  service method-action:	registerReader ""
//gsoap ns1  service method-fault:	registerReader ns1__NoAuthorityException_
//gsoap ns1  service method-fault:	registerReader ns1__SystemException_
int __ns1__registerReader(
    ns1__registerReader*                ns1__registerReader_,	///< Request parameter
    ns1__registerReaderResponse*        ns1__registerReaderResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getRedrTypes                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getRedrTypes" of service binding "LibServicePortBinding"

/**

Operation details:

  - SOAP document/literal style
  - SOAP Fault: "http://service.ws.hw.com/":NoAuthorityException (literal)
  - SOAP Fault: "http://service.ws.hw.com/":SystemException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getRedrTypes(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__getRedrTypes*                  ns1__getRedrTypes_,
    // response parameters:
    ns1__getRedrTypesResponse*          ns1__getRedrTypesResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getRedrTypes(
    struct soap *soap,
    // request parameters:
    ns1__getRedrTypes*                  ns1__getRedrTypes_,
    // response parameters:
    ns1__getRedrTypesResponse*          ns1__getRedrTypesResponse_
  );
@endcode

C++ proxy class (defined in soapLibServicePortBindingProxy.h):
@code
  class LibServicePortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapLibServicePortBindingService.h):
@code
  class LibServicePortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getRedrTypes document
//gsoap ns1  service method-encoding:	getRedrTypes literal
//gsoap ns1  service method-action:	getRedrTypes ""
//gsoap ns1  service method-fault:	getRedrTypes ns1__NoAuthorityException_
//gsoap ns1  service method-fault:	getRedrTypes ns1__SystemException_
int __ns1__getRedrTypes(
    ns1__getRedrTypes*                  ns1__getRedrTypes_,	///< Request parameter
    ns1__getRedrTypesResponse*          ns1__getRedrTypesResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getDeps                                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getDeps" of service binding "LibServicePortBinding"

/**

Operation details:

  - SOAP document/literal style
  - SOAP Fault: "http://service.ws.hw.com/":NoAuthorityException (literal)
  - SOAP Fault: "http://service.ws.hw.com/":SystemException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getDeps(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__getDeps*                       ns1__getDeps_,
    // response parameters:
    ns1__getDepsResponse*               ns1__getDepsResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getDeps(
    struct soap *soap,
    // request parameters:
    ns1__getDeps*                       ns1__getDeps_,
    // response parameters:
    ns1__getDepsResponse*               ns1__getDepsResponse_
  );
@endcode

C++ proxy class (defined in soapLibServicePortBindingProxy.h):
@code
  class LibServicePortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapLibServicePortBindingService.h):
@code
  class LibServicePortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getDeps document
//gsoap ns1  service method-encoding:	getDeps literal
//gsoap ns1  service method-action:	getDeps ""
//gsoap ns1  service method-fault:	getDeps ns1__NoAuthorityException_
//gsoap ns1  service method-fault:	getDeps ns1__SystemException_
int __ns1__getDeps(
    ns1__getDeps*                       ns1__getDeps_,	///< Request parameter
    ns1__getDepsResponse*               ns1__getDepsResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getAccounts1                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getAccounts1" of service binding "LibServicePortBinding"

/**

Operation details:

  - SOAP document/literal style
  - SOAP Fault: "http://service.ws.hw.com/":NoAuthorityException (literal)
  - SOAP Fault: "http://service.ws.hw.com/":SystemException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getAccounts1(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__getAccounts1*                  ns1__getAccounts1_,
    // response parameters:
    ns1__getAccounts1Response*          ns1__getAccounts1Response_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getAccounts1(
    struct soap *soap,
    // request parameters:
    ns1__getAccounts1*                  ns1__getAccounts1_,
    // response parameters:
    ns1__getAccounts1Response*          ns1__getAccounts1Response_
  );
@endcode

C++ proxy class (defined in soapLibServicePortBindingProxy.h):
@code
  class LibServicePortBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapLibServicePortBindingService.h):
@code
  class LibServicePortBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getAccounts1 document
//gsoap ns1  service method-encoding:	getAccounts1 literal
//gsoap ns1  service method-action:	getAccounts1 ""
//gsoap ns1  service method-fault:	getAccounts1 ns1__NoAuthorityException_
//gsoap ns1  service method-fault:	getAccounts1 ns1__SystemException_
int __ns1__getAccounts1(
    ns1__getAccounts1*                  ns1__getAccounts1_,	///< Request parameter
    ns1__getAccounts1Response*          ns1__getAccounts1Response_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

XML content can be retrieved from:
  - a FILE* fd, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

XML content can be stored to:
  - a FILE* fd, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback


@section ns2 Top-level root elements of schema ""

@section ns1 Top-level root elements of schema "http://service.ws.hw.com/"

  - <ns1:NoAuthorityException> (use wsdl2h option -g to auto-generate)

  - <ns1:SystemException> (use wsdl2h option -g to auto-generate)

  - <ns1:certLoss> (use wsdl2h option -g to auto-generate)

  - <ns1:certLossResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:checkReader> (use wsdl2h option -g to auto-generate)

  - <ns1:checkReaderResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:exceedFine> (use wsdl2h option -g to auto-generate)

  - <ns1:exceedFine1> (use wsdl2h option -g to auto-generate)

  - <ns1:exceedFine1Response> (use wsdl2h option -g to auto-generate)

  - <ns1:exceedFineResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:getAccounts> (use wsdl2h option -g to auto-generate)

  - <ns1:getAccounts1> (use wsdl2h option -g to auto-generate)

  - <ns1:getAccounts1Response> (use wsdl2h option -g to auto-generate)

  - <ns1:getAccountsResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:getBook> (use wsdl2h option -g to auto-generate)

  - <ns1:getBookResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:getCircs> (use wsdl2h option -g to auto-generate)

  - <ns1:getCircsResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:getDebts> (use wsdl2h option -g to auto-generate)

  - <ns1:getDebtsResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:getDeps> (use wsdl2h option -g to auto-generate)

  - <ns1:getDepsResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:getItems> (use wsdl2h option -g to auto-generate)

  - <ns1:getItemsResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:getLendHist> (use wsdl2h option -g to auto-generate)

  - <ns1:getLendHistResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:getLostPays> (use wsdl2h option -g to auto-generate)

  - <ns1:getLostPaysResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:getMarc> (use wsdl2h option -g to auto-generate)

  - <ns1:getMarcResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:getPregArrivals> (use wsdl2h option -g to auto-generate)

  - <ns1:getPregArrivalsResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:getPregs> (use wsdl2h option -g to auto-generate)

  - <ns1:getPregsResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:getReader> (use wsdl2h option -g to auto-generate)

  - <ns1:getReaderResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:getRedrTypes> (use wsdl2h option -g to auto-generate)

  - <ns1:getRedrTypesResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:getRelegateArrivals> (use wsdl2h option -g to auto-generate)

  - <ns1:getRelegateArrivalsResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:getRelegates> (use wsdl2h option -g to auto-generate)

  - <ns1:getRelegatesResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:getViolations> (use wsdl2h option -g to auto-generate)

  - <ns1:getViolations1> (use wsdl2h option -g to auto-generate)

  - <ns1:getViolations1Response> (use wsdl2h option -g to auto-generate)

  - <ns1:getViolationsResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:logout> (use wsdl2h option -g to auto-generate)

  - <ns1:logoutResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:registerReader> (use wsdl2h option -g to auto-generate)

  - <ns1:registerReaderResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:voltFine> (use wsdl2h option -g to auto-generate)

  - <ns1:voltFineResponse> (use wsdl2h option -g to auto-generate)

*/

/* End of LibServicePort.h */
